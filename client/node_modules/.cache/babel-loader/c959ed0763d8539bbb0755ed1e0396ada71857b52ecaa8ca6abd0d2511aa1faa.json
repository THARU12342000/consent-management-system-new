{"ast":null,"code":"var _jsxFileName = \"F:\\\\Intern\\\\CMS\\\\consent-management-system-new\\\\client\\\\src\\\\components\\\\agreements\\\\AgreementForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AgreementForm = ({\n  customerId,\n  productId,\n  onConsentGiven\n}) => {\n  _s();\n  const [consentGiven, setConsentGiven] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchAgreement = async () => {\n      try {\n        const {\n          data\n        } = await api.get(`/agreements/customer/${customerId}`);\n        const agreement = data.find(a => a.productId === productId);\n        setConsentGiven((agreement === null || agreement === void 0 ? void 0 : agreement.consentGiven) || false);\n      } catch {\n        setError('Failed to load consent');\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (customerId && productId) fetchAgreement();\n  }, [customerId, productId]);\n  const handleConsentChange = async e => {\n    const consent = e.target.checked;\n    setConsentGiven(consent);\n    try {\n      await api.post('/agreements', {\n        customerId,\n        productId,\n        consentGiven: consent,\n        termsVersion: '1.0'\n      });\n      onConsentGiven(consent);\n    } catch {\n      setError('Failed to update consent');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading consent status...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Consent Agreement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: consentGiven,\n        onChange: handleConsentChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), \"I give my consent to use my data for this product.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(AgreementForm, \"Dx0AOPieFqXHKg3cHCZtD8fSPNU=\");\n_c = AgreementForm;\nexport default AgreementForm;\nvar _c;\n$RefreshReg$(_c, \"AgreementForm\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","AgreementForm","customerId","productId","onConsentGiven","_s","consentGiven","setConsentGiven","loading","setLoading","error","setError","fetchAgreement","data","get","agreement","find","a","handleConsentChange","e","consent","target","checked","post","termsVersion","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","type","onChange","_c","$RefreshReg$"],"sources":["F:/Intern/CMS/consent-management-system-new/client/src/components/agreements/AgreementForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../../api/api';\r\n\r\nconst AgreementForm = ({ customerId, productId, onConsentGiven }) => {\r\n  const [consentGiven, setConsentGiven] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchAgreement = async () => {\r\n      try {\r\n        const { data } = await api.get(`/agreements/customer/${customerId}`);\r\n        const agreement = data.find(a => a.productId === productId);\r\n        setConsentGiven(agreement?.consentGiven || false);\r\n      } catch {\r\n        setError('Failed to load consent');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (customerId && productId) fetchAgreement();\r\n  }, [customerId, productId]);\r\n\r\n  const handleConsentChange = async (e) => {\r\n    const consent = e.target.checked;\r\n    setConsentGiven(consent);\r\n    try {\r\n      await api.post('/agreements', {\r\n        customerId,\r\n        productId,\r\n        consentGiven: consent,\r\n        termsVersion: '1.0',\r\n      });\r\n      onConsentGiven(consent);\r\n    } catch {\r\n      setError('Failed to update consent');\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Loading consent status...</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h3>Consent Agreement</h3>\r\n      {error && <p style={{color: 'red'}}>{error}</p>}\r\n      <label>\r\n        <input type=\"checkbox\" checked={consentGiven} onChange={handleConsentChange} />\r\n        I give my consent to use my data for this product.\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AgreementForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}